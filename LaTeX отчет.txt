\documentclass{article}
\usepackage{graphicx} % Required for inserting images

\title{LaTeX}
\author{Драп Ирина Петровна}
\date{25.12.2023}
\usepackage[russian]{babel}
\begin{document}

\maketitle
\newpage
\tableofcontents
\newpage
\section{Герой, Анимация и Текстуры}
Создаем 2D Scene сцену. Это будет наш старт, небольшая заготовка для дальнейшего развития нашей игры. Дадим ей временное название "World".

Следом создаем новую сцену, но на этот раз не 2D Scene, а CharacterBody2D. Для удобства дадим имя "Player". 

Пока наш герой не способен что либо делать. Для того что бы он хотя бы начал двигаться или прыгать необходимо прописать скрипт. Для этого мы создаем его, а после вносим туда дальнейшие коррективы по мере создания игры. 

Переходим на сцену нашего персонажа и добавляем туда CollisionShape2D. В правой части экрана находим раздел под названием Shape. С помощью этого раздела мы задаем форму нашего героя. Из заранее заготовленных материалов находим нужный нам спрайт и просто перетаскиваем его на сцену в диапазон выбранный с помощью Shape. 

Можно заметить что спрайт перекинулся не совсем четким. Это легко исправить в настройках Godot, а именно:
\begin{itemize}
\item Проект

\item Настройки проектов

\item Рендерринг

\item Текстуры 

\item Фильтр текстур по умолчанию

\item Nearest
\end{itemize}

Это означает, что не будет применяться эффект сглаживания и спрайт получится более четким.

Переходим в World, создаем там временное статическое тело, для того что бы наш герой мог где - нибудь стоять или обо что - нибудь ударяться. Это надо для того что бы проверить функционал нашего героя. Основные текстуры мы будем добавлять чуть позже, пока разберемся с настройкой спрайта.

Создаем узел StaticBody2D, а в него добавляем дочерний узел CollisionShape2D. Далее по старой схеме выбираем форму и переносим ее на экран. После, все так же в этом узле создаем ColorRect. Это позволит нам дать цвет нашей фигуре. 

Если нет подготовленных декораций, то их вполне можно создать прямо в Godot, он даст абсолютно все необходимое для этого, ограниченное лишь вашей фантазией. 

После сохранения и выстраивания нашей сцены, перекинем туда игрока. Теперь он и его действия будут отображаться там. Что бы наш герой не был статичным надо добавить к нему пару анимаций. Сделаем мы это с помощью AnimatedSprite2D. Это позволит нам добавить и настроить частоту кадров анимации. Необходимо будет в редакторе анимаций внимательно произвести подсчет кадров в нашем спрайте. Дальше просто вносим коррективы в FPS и при необходимости добавляем другие анимации. В моем случае я использовала частоту кадров в 20 FPS.

На этом этапе уже можно запускать игру и проверять нашего героя на анимации. В случае каких - то ошибок их можно будет устранить. Так же не забывает о прописании скрипта для героя, одних отредактированных анимаций будет мало. Тут необходим скрипт в стандарте с действиями героя. 

Если проверка прошла удачно и все работает, то можно начинать переходить к созданию фоновых объектов. А именно добавления различных платформ и кубов. Это разнообразит внешний вид игры, как уже говорилось ранее, если нет заготовленного материала, можно создать все в Godot. В сцене мира создаем узел TileMap и в нем же в правом в верхнем углу создаем TileSet, туда переносим заранее подготовленные текстурки. Так же в той же строке можно настроить остальные все необходимые параметры. 

На главном экране они просто так отображаться не будут. С помощью TileMap мы можем настроить и выбрать конкретные текстурки. Обрезав  их по своему усмотрению и сохранив для дальнейшей эксплуатации. Теперь после всей обработки мы можем зажать мышку на понравившейся нам текстурке и выбрать необходимый нам участок. После навести на мир, где можно начать рисовать и расставлять все по - своему усмотрению. После этого можно удалить старую платформу для испытаний героя.

\newpage
\section{Дверь, Переход на новый уровень}

Заранее готовим наш спрайт двери, нам понадобиться закрытая и открытая дверь. 

Так же можно простыми действиями сразу добавить пару уровней для нашей игры. Достаточно просто дублировать с помощью правой кнопки мыши наш мир. Так можно продолжать сколько угодно раз, главное не забыть визуально изменить уровень так как он будет полностью скопирован с первого мира. Для дальнейшего удобства предлагаю заменить название сцены "World" на "World1, World2, и тд." в зависимости от того сколько уровней мы вообще хотим добавить.

Создадим новую сцену для нашей двери, это будет 2D Scene. Дадим ей сразу удобное для нас название, к примеру ExitDoor. Создание новой сцены было необходимо для дальнейшего облегчения процесса создания игры. Так мы сможем просто переносить сцену с дверью в необходимый нам уровень, нежели если мы в каждой сцене уровня будем создавать новую дверь. Это было бы слишком затратно и неэффективно. 

Выносим на сцену заготовленную картинку с дверью. Надо учитывать тот факт что размер нашего героя 32Х32, поэтому подгоняем портал под эти параметры. Теперь необходимо добавить области которые будут срабатывать для перехода на следующую сцену. Добавляем Area2D, сюда мы добавляем в виде дочернего узла CollisionShape2D, где по старой схеме выбираем форму и в этот раз подгоняем ее под размер нашего портала. После всех визуальных коррективов незабываем добавить скрипт в котором пропишем все необходимое для дальнейшего функционала. 

После написания скрипта и поправки визуала, можно перейти к самому тестированию двери что бы удостовериться в ее работоспособности. В случае чего мы всегда можем устранить свои ошибки. Переносим сцену портала в сцену 1 уровня и ставим там где нам бы того хотелось. Так же поступаем и со вторым уровнем. После можно запустить игру и проверить работу. Так же не забываем провести все необходимые сигналы для полного функционала. 

\newpage
\section{Меню и Кнопки}

Создаем новую сцену CanvasLayer, сразу сохраняем и дадим ей имя "Menu". Тут создаем узел Button. Это обычная кнопка, она понадобится нам для создания самого меню и перехода на уровни. С правой стороны увидим поле в котором можно дать название этой кнопке. Пока она не имеет никакого функционал, но в дальнейшем мы это исправим. Создадим несколько кнопок, дадим им характерные названия, такие как:
\begin{itemize}
\item Меню
\item Выход
\end{itemize}

Не забываем добавить скрипт, к нему так же добавим сигналы для кнопок. После, уже в самом скрипте с помощью сигнаров пропишем все необходимое для функционала. После прописания, можно начать заниматься визуальной частью игры. 

Добавим узел MarginContainer. Он поможем нам настроить наши кнопки, а если быть точнее то их расположение на экране. Внесем сюда же вспомогательбный дочерный узел VBoxContainer. Он поможем нам правильно расположить текст по вертикали. 

Создаем новую сцену CanvasLayer, но на этот раз это будет выход из уровня. Создаем так же кнопку и необходимые вспомогательные узлы. Переносим нашу кнопу в верхний правй угол. Так же не забываем прописать скрипт и провести сигналы. 

После всей работы переносим наш выход на каждый уровень. Теперь у игрока появится возможность покинуть данный уровень без полного закрытия игры.
\newpage
\section{Ловушка}

Создаем сцену 2D и называем ее "Spikes", затем создаем скрипт для наших шипов и добавляем картинку на нашу сцену. Чтобы шипы имели форму и игрок мог с ними соприкасаться, мы добавляем узел Area2D, а так же создаем к нему дочерний узел CollisionShspe2D, выбираем форму в правой строке "Shape" и применяем ее к нашим шипам. Нажимаем на узел Area2D и добавляем сигнал в наш скрипт. Прописываем условие, которое позволит уничтожить игрока при соприкосновении с препятствием. Потом мы идем в папку с нашим играком и уже в скрипте для игрока прописывем функцию, которая будет уничтожать нашего игрока. 
Теперь мы можем перенести наши ловушки на игровое поле. Далее создаем новую сцену и добаляем туда узел CfnvasLayer, а к нему присоединяем дочерний узел VBoxContainer. К дочернему узлу добавляем кнопку и прописываем там то, что наш игрок погиб. Далее редактируем все по тому же принципу, как редактировали меню. В срипте прописываем код для перехода в главное меню по нажатию кнопки, так же можно добавить таймер, который по истечению времени сам будет перекидывать нас в главное меню.
\newpage
\section{Киви}

Как обычно создаем новую сцену и даем ей имя "Kiwi". Туда же добавим  CollisionShape2D и по классике выбираем форму. После ищем наш спрайт и переносим его на экран подгоняя размер под форму. 
Прописываем необходимый скрипт и в сцене героя создадим еще один узел Area2D. Там же создадим CollisionShape2D и выбираем фигуру. Опять подгоним ее под героя и это условно будет область поглощения киви. Внесем коррективы в код, присоединим сигнал и можно расставлять киви по всем уровням.
\newpage
\section{Вывод}
Вот так просто у нас получилось написать первую небольшую игру, в которой герой может преодалевать препятствия и собирать фрукты, а также переходить из одного мира в другой.

\end{document}